// <auto-generated />
using System;
using EskiDefterler.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EskiDefterler.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241230235744_PhotoUrlAdded")]
    partial class PhotoUrlAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressDescription = "Sevgi Caddesi,Susam Sokağı, Minik Kuş Apartmanı No:13 / Daire:2",
                            AddressName = "Home",
                            District = "Kadıköy",
                            Province = "İstanbul",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AddressDescription = "Gökçe Mahallesi, Yıldız Apartmanı No:21 Daire:7",
                            AddressName = "Office",
                            District = "Mustafakemalpaşa",
                            Province = "Bursa",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            AddressDescription = "Kutlu Sokak, Doğan Apt. No:12 Daire:1",
                            AddressName = "Evim",
                            District = "Karşıyaka",
                            Province = "İzmir",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            AddressDescription = "Perihan Mahallesi, Savaş Sokak, Çiçek Apt. No:12 Daire:9",
                            AddressName = "Annemler",
                            District = "Maltepe",
                            Province = "İstanbul",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            AddressDescription = "Balıkesir Mh. , Perdane Sokak, Özdemir Sitesi B Blok Daire:13",
                            AddressName = "MyHome",
                            District = "Çankaya",
                            Province = "Ankara",
                            UserId = 5
                        });
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.CartProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("CartProducts");
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Kitap"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Walkmen"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Pikap"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Kaset"
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Plak"
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "DVD"
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "CD"
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "İmzalı Ürünler"
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "Diğerleri"
                        });
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<decimal>("Freight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateOnly?>("RequiredDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ShippedDate")
                        .HasColumnType("date");

                    b.Property<int>("ShipperId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Id");

                    b.HasIndex("ShipperId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            Freight = 0m,
                            OrderDate = new DateOnly(2024, 10, 18),
                            RequiredDate = new DateOnly(2024, 10, 22),
                            ShippedDate = new DateOnly(2024, 10, 20),
                            ShipperId = 1,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Discount")
                        .HasMaxLength(100)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasMaxLength(100)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Discount = 0m,
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 1,
                            UnitPrice = 200m
                        });
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasMaxLength(100)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Condition = "Yeni Gibi",
                            Description = "Ada Müzk Yapım şirketi imzalı 99 çıkışlı albümü",
                            PhotoUrl = "https://ideacdn.net/idea/ce/36/myassets/products/164/img-e5560.JPG?revision=1720098706",
                            Price = 200m,
                            StockQuantity = 1,
                            SubCategoryId = 36,
                            Title = "1999 Bülent Ortaçgil - Eski Defterler Kaseti"
                        },
                        new
                        {
                            Id = 2,
                            Condition = "İkinci el",
                            Description = "Cem Yayınları, 1971. Karton Kapak",
                            PhotoUrl = "https://s3.cloud.ngn.com.tr/kitantik/images/2024-06-12/1br9qfwlxbwuygk13hk.jpg",
                            Price = 100m,
                            StockQuantity = 2,
                            SubCategoryId = 14,
                            Title = "İnce Memed II"
                        },
                        new
                        {
                            Id = 3,
                            Condition = "İkinci El",
                            Description = "Yönetmen: Yann Samuell Oyuncular: Guillaume Canet, Marion Cotillard, Thibault Verhaeghe",
                            PhotoUrl = "https://www.plakperest.com/img/products/16742102032787432570614927694837_20.01.2023_a1433d3.jpg",
                            Price = 25m,
                            StockQuantity = 1,
                            SubCategoryId = 1,
                            Title = "Cesaretin var mı aşka?"
                        });
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PhotoPath = "https://ideacdn.net/idea/ce/36/myassets/products/164/img-e5560.JPG?revision=1720098706",
                            PhotoTitle = "Ortaçgil",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            PhotoPath = "https://s3.cloud.ngn.com.tr/kitantik/images/2024-06-12/1br9qfwlxbwuygk13hk.jpg",
                            PhotoTitle = "İnceMemed",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            PhotoPath = "https://www.plakperest.com/img/products/16742102032787432570614927694837_20.01.2023_a1433d3.jpg",
                            ProductId = 3
                        });
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleTitle")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("RoleTitle")
                        .IsUnique();

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleTitle = "Customer"
                        },
                        new
                        {
                            Id = 2,
                            RoleTitle = "Admin"
                        });
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.Shipper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Shippers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "JetKargo",
                            Phone = "+90 555 444 55 55"
                        },
                        new
                        {
                            Id = 2,
                            CompanyName = "Aras Kargo",
                            Phone = "444 25 52"
                        },
                        new
                        {
                            Id = 3,
                            CompanyName = "PTT Kargo",
                            Phone = "+90 312 309 51 44"
                        });
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Id");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Name = "Aşk ve Romantik"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Name = "Bilim Kurgu"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Name = "Biyogrofi ve Otobiyografi"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Name = "Bilim ve Araştırma"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Name = "Deneme ve Makale"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            Name = "Ders Kitapları"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            Name = "Fantastik ve Mitoloji"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Name = "Gerilim"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            Name = "Hobi ve İlgi Alanları"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            Name = "Kişisel Gelişim"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            Name = "Macera"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 1,
                            Name = "Öykü"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 1,
                            Name = "Polisiye"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 1,
                            Name = "Roman"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 1,
                            Name = "Şiir"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 1,
                            Name = "Sözlük ve Ansiklopediler"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 1,
                            Name = "Tarih"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 1,
                            Name = "Tiyatro"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 3,
                            Name = "Alternatif Rock"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 3,
                            Name = "Blues"
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 3,
                            Name = "Caz(Jazz)"
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 3,
                            Name = "Country"
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 3,
                            Name = "Dans"
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 3,
                            Name = "Elektronik"
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 3,
                            Name = "Folk"
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 3,
                            Name = "Funk"
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 3,
                            Name = "Gospel"
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 3,
                            Name = "Hard Rock"
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 3,
                            Name = "Heavy Metal"
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 3,
                            Name = "Hip-Hop"
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 3,
                            Name = "Indie"
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 3,
                            Name = "Klasik"
                        },
                        new
                        {
                            Id = 33,
                            CategoryId = 3,
                            Name = "Latin"
                        },
                        new
                        {
                            Id = 34,
                            CategoryId = 3,
                            Name = "New Age"
                        },
                        new
                        {
                            Id = 35,
                            CategoryId = 3,
                            Name = "Opera"
                        },
                        new
                        {
                            Id = 36,
                            CategoryId = 3,
                            Name = "Pop"
                        },
                        new
                        {
                            Id = 37,
                            CategoryId = 3,
                            Name = "Punk"
                        },
                        new
                        {
                            Id = 38,
                            CategoryId = 3,
                            Name = "R&B"
                        },
                        new
                        {
                            Id = 39,
                            CategoryId = 3,
                            Name = "Rap"
                        },
                        new
                        {
                            Id = 40,
                            CategoryId = 3,
                            Name = "Reggae"
                        },
                        new
                        {
                            Id = 41,
                            CategoryId = 3,
                            Name = "Rock"
                        },
                        new
                        {
                            Id = 42,
                            CategoryId = 3,
                            Name = "Soul"
                        },
                        new
                        {
                            Id = 43,
                            CategoryId = 3,
                            Name = "Tekno"
                        },
                        new
                        {
                            Id = 44,
                            CategoryId = 3,
                            Name = "Trap"
                        },
                        new
                        {
                            Id = 45,
                            CategoryId = 3,
                            Name = "Türk Halk Müziği"
                        },
                        new
                        {
                            Id = 46,
                            CategoryId = 3,
                            Name = "Türk Sanat Müziği"
                        },
                        new
                        {
                            Id = 47,
                            CategoryId = 3,
                            Name = "World Music"
                        });
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateOnly(1977, 9, 15),
                            Email = "tomhardy@gmail.com",
                            FirstName = "Tom",
                            LastName = "Hardy",
                            Password = "qweasd",
                            Phone = "+90 555 555 55 55",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateOnly(2002, 12, 17),
                            Email = "furkan_yeneroğlu@gmail.com",
                            FirstName = "Furkan",
                            LastName = "Yeneroğlu",
                            Password = "qweasd",
                            Phone = "+90 555 555 55 44",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateOnly(2002, 10, 21),
                            Email = "iremozyurt@gmail.com",
                            FirstName = "İrem Nur",
                            LastName = "Özyurt",
                            Password = "qweasd",
                            Phone = "+90 555 555 55 34",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateOnly(2005, 10, 4),
                            Email = "ildemcakici@gmail.com",
                            FirstName = "İldem",
                            LastName = "Çakıcı",
                            Password = "qweasd",
                            Phone = "+90 555 555 54 34",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateOnly(1983, 5, 5),
                            Email = "henrycavill@gmail.com",
                            FirstName = "Henry",
                            LastName = "Cavill",
                            Password = "qweasd",
                            Phone = "+90 555 555 33 55",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            BirthDate = new DateOnly(2002, 11, 24),
                            Email = "sevval@admin.com",
                            FirstName = "Şevval",
                            LastName = "Özdemir",
                            Password = "qweasd",
                            Phone = "+90 555 555 51 34",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 7,
                            BirthDate = new DateOnly(1, 1, 1),
                            Email = "ercan@admin.com",
                            FirstName = "Ercan",
                            LastName = "Öztürk",
                            Password = "qweasd",
                            Phone = "+90 555 555 55 24",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.Address", b =>
                {
                    b.HasOne("EskiDefterler.Core.Entities.Concrete.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.CartProduct", b =>
                {
                    b.HasOne("EskiDefterler.Core.Entities.Concrete.Cart", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EskiDefterler.Core.Entities.Concrete.Product", "Product")
                        .WithMany("CartProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.Order", b =>
                {
                    b.HasOne("EskiDefterler.Core.Entities.Concrete.Address", "Addresses")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EskiDefterler.Core.Entities.Concrete.Shipper", "Shipper")
                        .WithMany("Orders")
                        .HasForeignKey("ShipperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EskiDefterler.Core.Entities.Concrete.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Addresses");

                    b.Navigation("Shipper");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.OrderDetail", b =>
                {
                    b.HasOne("EskiDefterler.Core.Entities.Concrete.Order", "Orders")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EskiDefterler.Core.Entities.Concrete.Product", "Products")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.Product", b =>
                {
                    b.HasOne("EskiDefterler.Core.Entities.Concrete.SubCategory", "SubCategories")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.ProductImage", b =>
                {
                    b.HasOne("EskiDefterler.Core.Entities.Concrete.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.SubCategory", b =>
                {
                    b.HasOne("EskiDefterler.Core.Entities.Concrete.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.User", b =>
                {
                    b.HasOne("EskiDefterler.Core.Entities.Concrete.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.Cart", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.Product", b =>
                {
                    b.Navigation("CartProducts");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.Shipper", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EskiDefterler.Core.Entities.Concrete.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
